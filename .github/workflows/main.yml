name: Ecomerg Daily Reports

on:
  schedule:
    - cron: '0 10 * * *'  # Daily at 1 PM Kuwait time (10 AM UTC)
  workflow_dispatch:  # Allow manual trigger

jobs:
  generate-report:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        pip install requests pandas
    
    - name: Generate and send report
      env:
        GOOGLE_SHEET_URL: ${{ secrets.GOOGLE_SHEET_URL }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      run: |
        python3 << 'EOF'
        import requests
        import pandas as pd
        import os
        from datetime import datetime
        
        def send_telegram_message(bot_token, chat_id, message):
            url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
            data = {
                "chat_id": chat_id,
                "text": message,
                "parse_mode": "Markdown"
            }
            response = requests.post(url, data=data)
            return response.json()
        
        def get_sheet_data():
            try:
                # Extract sheet ID from URL
                sheet_url = os.environ['GOOGLE_SHEET_URL']
                sheet_id = sheet_url.split('/d/')[1].split('/')[0]
                
                # Read the sheet as CSV (public access)
                csv_url = f"https://docs.google.com/spreadsheets/d/{sheet_id}/export?format=csv&gid=0"
                df = pd.read_csv(csv_url)
                
                return df
            except Exception as e:
                print(f"Error reading sheet: {e}")
                return None
        
        def generate_report():
            df = get_sheet_data()
            if df is None:
                return "❌ **خطأ في قراءة البيانات**\n\nلم أتمكن من الوصول لبيانات Google Sheet"
            
            # Get today's date
            today = datetime.now().strftime('%Y-%m-%d')
            
            # Generate report
            report = f"📊 **تقرير Ecomerg اليومي**\n"
            report += f"📅 **التاريخ:** {today}\n\n"
            
            # Basic statistics
            total_rows = len(df)
            report += f"📈 **إجمالي السجلات:** {total_rows}\n"
            
            # If there are specific columns, analyze them
            if not df.empty:
                columns = df.columns.tolist()
                report += f"📋 **الأعمدة المتاحة:** {len(columns)}\n"
                
                # Show first few column names
                if len(columns) > 0:
                    report += f"📝 **أسماء الأعمدة:** {', '.join(columns[:5])}\n"
                    if len(columns) > 5:
                        report += f"... و {len(columns) - 5} أعمدة أخرى\n"
                
                # Look for common e-commerce columns
                if 'Orders' in columns:
                    if pd.api.types.is_numeric_dtype(df['Orders']):
                        total_orders = df['Orders'].sum()
                        report += f"🛒 **إجمالي الطلبات:** {total_orders}\n"
                
                if 'Revenue' in columns:
                    if pd.api.types.is_numeric_dtype(df['Revenue']):
                        total_revenue = df['Revenue'].sum()
                        report += f"💰 **إجمالي الإيرادات:** {total_revenue:.2f} KWD\n"
            
            report += f"\n✅ **تم إنشاء التقرير بنجاح في:** {datetime.now().strftime('%H:%M:%S')}"
            
            return report
        
        # Main execution
        try:
            print("🚀 بدء إنشاء التقرير اليومي...")
            
            # Generate report
            report_message = generate_report()
            
            # Send to Telegram
            bot_token = os.environ['TELEGRAM_BOT_TOKEN']
            chat_id = os.environ['TELEGRAM_CHAT_ID']
            
            result = send_telegram_message(bot_token, chat_id, report_message)
            
            if result.get('ok'):
                print("✅ تم إرسال التقرير بنجاح!")
            else:
                print(f"❌ خطأ في إرسال التقرير: {result}")
        
        except Exception as e:
            error_message = f"❌ **خطأ في النظام**\n\n```\n{str(e)}\n```"
            try:
                send_telegram_message(os.environ['TELEGRAM_BOT_TOKEN'], os.environ['TELEGRAM_CHAT_ID'], error_message)
            except:
                pass
            print(f"❌ خطأ: {e}")
        EOF

