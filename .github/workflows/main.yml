name: Ecomerg Daily Reports

on:
  schedule:
    - cron: '0 10 * * *'  # Daily at 1 PM Kuwait time (10 AM UTC)
  workflow_dispatch:  # Allow manual trigger

jobs:
  generate-report:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        pip install requests pandas
    
    - name: Generate and send report
      env:
        GOOGLE_SHEET_URL: ${{ secrets.GOOGLE_SHEET_URL }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      run: |
        python3 << 'EOF'
        import requests
        import pandas as pd
        import os
        from datetime import datetime, timedelta
        
        def send_telegram_message(bot_token, chat_id, message):
            url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
            data = {
                "chat_id": chat_id,
                "text": message,
                "parse_mode": "Markdown"
            }
            response = requests.post(url, data=data)
            return response.json()
        
        def get_sheet_data():
            try:
                # Extract sheet ID from URL
                sheet_url = os.environ['GOOGLE_SHEET_URL']
                sheet_id = sheet_url.split('/d/')[1].split('/')[0]
                
                # Read the sheet as CSV (public access)
                csv_url = f"https://docs.google.com/spreadsheets/d/{sheet_id}/export?format=csv&gid=0"
                df = pd.read_csv(csv_url)
                
                return df
            except Exception as e:
                print(f"Error reading sheet: {e}")
                return None
        
        def format_number(num):
            """Format numbers with proper Arabic formatting"""
            if pd.isna(num) or num == 0:
                return "0"
            if num >= 1000:
                return f"{num:,.0f}"
            elif num >= 1:
                return f"{num:.1f}"
            else:
                return f"{num:.2f}"
        
        def get_performance_emoji(value, threshold_good=80, threshold_ok=60):
            """Get performance emoji based on value"""
            if pd.isna(value):
                return "⚪"
            if value >= threshold_good:
                return "🟢"
            elif value >= threshold_ok:
                return "🟡"
            else:
                return "🔴"
        
        def generate_report():
            df = get_sheet_data()
            if df is None:
                return "❌ **خطأ في قراءة البيانات**\n\nلم أتمكن من الوصول لبيانات Google Sheet"
            
            if df.empty:
                return "📊 **تقرير Ecomerg اليومي**\n\n⚠️ **لا توجد بيانات متاحة**"
            
            # Get today's date
            today = datetime.now().strftime('%Y-%m-%d')
            yesterday = (datetime.now() - timedelta(days=1)).strftime('%Y-%m-%d')
            
            # Generate report header
            report = f"📊 **تقرير Ecomerg اليومي**\n"
            report += f"📅 **التاريخ:** {today}\n"
            report += f"⏰ **وقت التقرير:** {datetime.now().strftime('%H:%M:%S')}\n\n"
            
            # Get latest data (assuming last row is most recent)
            latest_data = df.iloc[-1] if len(df) > 0 else None
            
            if latest_data is not None:
                # Orders Summary
                report += "🛒 **ملخص الطلبات:**\n"
                
                if '🛒 طلبات جديدة' in df.columns:
                    new_orders = latest_data.get('🛒 طلبات جديدة', 0)
                    report += f"• طلبات جديدة: {format_number(new_orders)}\n"
                
                if '✅ تم التسليم' in df.columns:
                    delivered = latest_data.get('✅ تم التسليم', 0)
                    report += f"• تم التسليم: {format_number(delivered)}\n"
                
                if '❌ ملغي' in df.columns:
                    cancelled = latest_data.get('❌ ملغي', 0)
                    report += f"• ملغي: {format_number(cancelled)}\n"
                
                if '⏸️ معلق' in df.columns:
                    pending = latest_data.get('⏸️ معلق', 0)
                    report += f"• معلق: {format_number(pending)}\n"
                
                report += "\n"
                
                # Financial Summary
                report += "💰 **الملخص المالي:**\n"
                
                if '💰 الميزانية' in df.columns:
                    budget = latest_data.get('💰 الميزانية', 0)
                    report += f"• الميزانية: {format_number(budget)} د.ك\n"
                
                if '💰 الإيرادات الفعلية' in df.columns:
                    revenue = latest_data.get('💰 الإيرادات الفعلية', 0)
                    report += f"• الإيرادات الفعلية: {format_number(revenue)} د.ك\n"
                
                if '💵 سعر الطلب' in df.columns:
                    order_price = latest_data.get('💵 سعر الطلب', 0)
                    report += f"• سعر الطلب: {format_number(order_price)} د.ك\n"
                
                if '💎 السعر الحقيقي' in df.columns:
                    real_price = latest_data.get('💎 السعر الحقيقي', 0)
                    report += f"• السعر الحقيقي: {format_number(real_price)} د.ك\n"
                
                report += "\n"
                
                # Performance Metrics
                report += "📈 **مؤشرات الأداء:**\n"
                
                if '📉 معدل الإلغاء %' in df.columns:
                    cancel_rate = latest_data.get('📉 معدل الإلغاء %', 0)
                    emoji = get_performance_emoji(100 - cancel_rate, 90, 80)
                    report += f"• معدل الإلغاء: {format_number(cancel_rate)}% {emoji}\n"
                
                if '📈 معدل التحويل %' in df.columns:
                    conversion_rate = latest_data.get('📈 معدل التحويل %', 0)
                    emoji = get_performance_emoji(conversion_rate, 5, 3)
                    report += f"• معدل التحويل: {format_number(conversion_rate)}% {emoji}\n"
                
                if '💸 ROAS' in df.columns:
                    roas = latest_data.get('💸 ROAS', 0)
                    emoji = get_performance_emoji(roas, 3, 2)
                    report += f"• ROAS: {format_number(roas)} {emoji}\n"
                
                if '🎯 الأداء العام' in df.columns:
                    overall_performance = latest_data.get('🎯 الأداء العام', 0)
                    emoji = get_performance_emoji(overall_performance, 80, 60)
                    report += f"• الأداء العام: {format_number(overall_performance)}% {emoji}\n"
                
                report += "\n"
                
                # Weekly Summary (if we have enough data)
                if len(df) >= 7:
                    report += "📊 **ملخص الأسبوع الماضي:**\n"
                    
                    # Get last 7 days data
                    last_week = df.tail(7)
                    
                    if '🛒 طلبات جديدة' in df.columns:
                        weekly_orders = last_week['🛒 طلبات جديدة'].sum()
                        report += f"• إجمالي الطلبات: {format_number(weekly_orders)}\n"
                    
                    if '💰 الإيرادات الفعلية' in df.columns:
                        weekly_revenue = last_week['💰 الإيرادات الفعلية'].sum()
                        report += f"• إجمالي الإيرادات: {format_number(weekly_revenue)} د.ك\n"
                    
                    if '📈 معدل التحويل %' in df.columns:
                        avg_conversion = last_week['📈 معدل التحويل %'].mean()
                        report += f"• متوسط التحويل: {format_number(avg_conversion)}%\n"
                    
                    report += "\n"
            
            # Data Quality Check
            total_rows = len(df)
            report += f"📋 **معلومات البيانات:**\n"
            report += f"• إجمالي السجلات: {total_rows}\n"
            report += f"• آخر تحديث: {datetime.now().strftime('%d/%m/%Y %H:%M')}\n"
            
            # Footer
            report += f"\n✅ **تم إنشاء التقرير بنجاح**\n"
            report += f"🤖 **نظام التقارير التلقائي - Ecomerg**"
            
            return report
        
        # Main execution
        try:
            print("🚀 بدء إنشاء التقرير اليومي المحسن...")
            
            # Generate report
            report_message = generate_report()
            
            # Send to Telegram
            bot_token = os.environ['TELEGRAM_BOT_TOKEN']
            chat_id = os.environ['TELEGRAM_CHAT_ID']
            
            result = send_telegram_message(bot_token, chat_id, report_message)
            
            if result.get('ok'):
                print("✅ تم إرسال التقرير بنجاح!")
                print(f"📨 Message ID: {result.get('result', {}).get('message_id', 'N/A')}")
            else:
                print(f"❌ خطأ في إرسال التقرير: {result}")
        
        except Exception as e:
            error_message = f"❌ **خطأ في النظام**\n\n```\n{str(e)}\n```"
            try:
                send_telegram_message(os.environ['TELEGRAM_BOT_TOKEN'], os.environ['TELEGRAM_CHAT_ID'], error_message)
            except:
                pass
            print(f"❌ خطأ: {e}")
        EOF

