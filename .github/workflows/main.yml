name: Ecomerg Daily Reports

on:
  schedule:
    - cron: '0 10 * * *'  # Daily at 1 PM Kuwait time (10 AM UTC)
  workflow_dispatch:  # Allow manual trigger

jobs:
  generate-report:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        pip install requests pandas
    
    - name: Generate and send report
      env:
        GOOGLE_SHEET_URL: ${{ secrets.GOOGLE_SHEET_URL }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      run: |
        python3 << 'EOF'
        import requests
        import pandas as pd
        import os
        from datetime import datetime
        
        def send_telegram_message(bot_token, chat_id, message):
            url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
            data = {
                "chat_id": chat_id,
                "text": message,
                "parse_mode": "Markdown"
            }
            response = requests.post(url, data=data)
            return response.json()
        
        def get_sheet_data():
            try:
                # Extract sheet ID from URL
                sheet_url = os.environ['GOOGLE_SHEET_URL']
                sheet_id = sheet_url.split('/d/')[1].split('/')[0]
                
                # Read the sheet as CSV (public access)
                csv_url = f"https://docs.google.com/spreadsheets/d/{sheet_id}/export?format=csv&gid=0"
                df = pd.read_csv(csv_url)
                
                return df
            except Exception as e:
                print(f"Error reading sheet: {e}")
                return None
        
        def get_status_emoji(team_name, cancel_rate, delivered, new_orders):
            """Get status emoji based on performance"""
            if delivered == 0 and new_orders > 0:
                return "🚨"  # No deliveries yet
            elif cancel_rate > 10:
                return "⚠️"  # High cancel rate
            else:
                return "✅"  # Good performance
        
        def get_rank_emoji(rank):
            """Get rank emoji"""
            rank_emojis = {
                1: "🥇", 2: "🥈", 3: "🥉", 4: "4️⃣", 5: "5️⃣",
                6: "6️⃣", 7: "7️⃣", 8: "8️⃣", 9: "9️⃣", 10: "🔟"
            }
            return rank_emojis.get(rank, f"{rank}️⃣")
        
        def format_number(num):
            """Format numbers with proper formatting"""
            if pd.isna(num) or num == 0:
                return "0"
            if isinstance(num, str):
                try:
                    num = float(num)
                except:
                    return str(num)
            
            if num >= 1000:
                return f"{num:,.0f}"
            elif num >= 1:
                return f"{num:.1f}"
            else:
                return f"{num:.2f}"
        
        def generate_report():
            df = get_sheet_data()
            if df is None:
                return "❌ **خطأ في قراءة البيانات**\n\nلم أتمكن من الوصول لبيانات Google Sheet"
            
            if df.empty:
                return "📊 **تقرير Ecomerg اليومي**\n\n⚠️ **لا توجد بيانات متاحة**"
            
            # Get today's date
            today = datetime.now().strftime('%d/%m/%Y')
            
            # Generate report header
            report = f"🔥 **التقرير الذكي - {today}**\n"
            report += "━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n"
            report += "✅ **الفرق النشطة:**\n"
            
            # Process data
            teams_data = []
            total_orders = 0
            total_delivered = 0
            total_cancelled = 0
            total_budget = 0
            complete_teams = 0
            incomplete_teams = 0
            
            for index, row in df.iterrows():
                try:
                    team_name = str(row.get('المجموعة', 'Unknown'))
                    new_orders = float(row.get('🛒 طلبات جديدة', 0)) if pd.notna(row.get('🛒 طلبات جديدة', 0)) else 0
                    delivered = float(row.get('✅ تم التسليم', 0)) if pd.notna(row.get('✅ تم التسليم', 0)) else 0
                    cancelled = float(row.get('❌ ملغي', 0)) if pd.notna(row.get('❌ ملغي', 0)) else 0
                    hold = float(row.get('⏸️ معلق', 0)) if pd.notna(row.get('⏸️ معلق', 0)) else 0
                    budget = float(row.get('💰 الميزانية', 0)) if pd.notna(row.get('💰 الميزانية', 0)) else 0
                    
                    # Calculate metrics
                    total_processed = delivered + cancelled
                    cancel_rate = (cancelled / total_processed * 100) if total_processed > 0 else 0
                    order_price = (budget / new_orders) if new_orders > 0 else 0
                    target = delivered - cancelled  # Simple target calculation
                    
                    # Determine status
                    status_emoji = get_status_emoji(team_name, cancel_rate, delivered, new_orders)
                    
                    # Check if data is complete
                    if new_orders > 0 or delivered > 0 or cancelled > 0:
                        complete_teams += 1
                    else:
                        incomplete_teams += 1
                    
                    teams_data.append({
                        'team': team_name,
                        'new_orders': new_orders,
                        'delivered': delivered,
                        'cancelled': cancelled,
                        'hold': hold,
                        'budget': budget,
                        'cancel_rate': cancel_rate,
                        'order_price': order_price,
                        'target': target,
                        'status': status_emoji
                    })
                    
                    # Add to totals
                    total_orders += new_orders
                    total_delivered += delivered
                    total_cancelled += cancelled
                    total_budget += budget
                    
                except Exception as e:
                    print(f"Error processing row {index}: {e}")
                    continue
            
            # Sort teams by new orders (descending)
            teams_data.sort(key=lambda x: x['new_orders'], reverse=True)
            
            # Generate team reports
            for rank, team in enumerate(teams_data, 1):
                if team['new_orders'] == 0 and team['delivered'] == 0 and team['cancelled'] == 0:
                    # Incomplete data
                    report += f"{get_rank_emoji(rank)} **{team['team']} ⚠️**\n"
                    report += "⚠️ **بيانات ناقصة**\n"
                    report += "📦 New Orders: 0\n"
                    report += "🚚 Delivered: 0\n"
                    report += "❌ Cancel: 0\n"
                    report += "⏳ Hold: 0\n"
                    report += "💸 Budget: 0\n"
                    report += "🎯 Target: +0\n"
                    report += "💰 Order Price: 0.00\n"
                    report += "📊 Cancel Rate: 0.0%\n"
                else:
                    # Complete data
                    target_sign = "+" if team['target'] >= 0 else ""
                    report += f"{get_rank_emoji(rank)} **{team['team']} {team['status']}**\n"
                    report += f"📦 New Orders: {format_number(team['new_orders'])}\n"
                    report += f"🚚 Delivered: {format_number(team['delivered'])}\n"
                    report += f"❌ Cancel: {format_number(team['cancelled'])}\n"
                    report += f"⏳ Hold: {format_number(team['hold'])}\n"
                    report += f"💸 Budget: {format_number(team['budget'])}\n"
                    report += f"🎯 Target: {target_sign}{format_number(team['target'])}\n"
                    report += f"💰 Order Price: {format_number(team['order_price'])}\n"
                    report += f"📊 Cancel Rate: {team['cancel_rate']:.1f}%\n"
                
                report += "━━━━━━━━━━━━━━━━━━━━━━━━━━━\n"
            
            # Generate summary
            total_processed = total_delivered + total_cancelled
            overall_cancel_rate = (total_cancelled / total_processed * 100) if total_processed > 0 else 0
            delivery_rate = (total_delivered / total_processed * 100) if total_processed > 0 else 0
            avg_order_price = (total_budget / total_orders) if total_orders > 0 else 0
            
            report += "━━━━━━━━━━━━━━━━━━━━━━━━━━━\n"
            report += f"📊 **ملخص {today}:**\n"
            report += f"✅ فرق بيانات كاملة: {complete_teams}/{len(teams_data)}\n"
            report += f"⚠️ فرق بيانات ناقصة: {incomplete_teams}\n"
            report += f"❌ فرق بدون بيانات: 0\n"
            report += f"📦 إجمالي الطلبات: {format_number(total_orders)}\n"
            report += f"🚚 إجمالي المسلم: {format_number(total_delivered)}\n"
            report += f"❌ إجمالي الملغي: {format_number(total_cancelled)}\n"
            report += f"💸 إجمالي الميزانية: {format_number(total_budget)}\n"
            report += f"💰 متوسط سعر الطلب: {format_number(avg_order_price)}\n"
            report += f"📈 معدل التسليم: {delivery_rate:.1f}%\n"
            report += f"📉 معدل الإلغاء: {overall_cancel_rate:.1f}%\n"
            
            return report
        
        # Main execution
        try:
            print("🚀 بدء إنشاء التقرير الاحترافي...")
            
            # Generate report
            report_message = generate_report()
            
            # Send to Telegram
            bot_token = os.environ['TELEGRAM_BOT_TOKEN']
            chat_id = os.environ['TELEGRAM_CHAT_ID']
            
            result = send_telegram_message(bot_token, chat_id, report_message)
            
            if result.get('ok'):
                print("✅ تم إرسال التقرير بنجاح!")
                print(f"📨 Message ID: {result.get('result', {}).get('message_id', 'N/A')}")
            else:
                print(f"❌ خطأ في إرسال التقرير: {result}")
        
        except Exception as e:
            error_message = f"❌ **خطأ في النظام**\n\n```\n{str(e)}\n```"
            try:
                send_telegram_message(os.environ['TELEGRAM_BOT_TOKEN'], os.environ['TELEGRAM_CHAT_ID'], error_message)
            except:
                pass
            print(f"❌ خطأ: {e}")
        EOF

